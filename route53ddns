#!/usr/bin/perl
use strict;
use warnings;
use Regexp::Assemble;
use Net::Amazon::Route53;
use Net::Amazon::Route53::ResourceRecordSet::Change;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use Pod::Usage;
use LWP::Simple qw(get);

my $gip = get('http://169.254.169.254/latest/meta-data/public-ipv4');

my $id = $ENV{AWS_ACCESS_KEY};
my $key = $ENV{AWS_SECRET_KEY};

GetOptions(
    "id=s"     => \$id,
    "key=s"    => \$key,
    "zone=s"   => \my $zone,
    "host=s"   => \my @host,
);

pod2usage() unless $id and $key and $zone and @host;

my $route53 = Net::Amazon::Route53->new(
    id  => $id,
    key => $key,
);

my ($hostedzone) = $route53->get_hosted_zones($zone . '.');
my $old_records = $hostedzone->resource_record_sets;

my $ra = Regexp::Assemble->new;
$ra->add(sprintf'^\Q%s.\E$', $_) for @host;

for my $old_record (@$old_records) {
    next if ($old_record ne "A");
    if ( $ra->match( $old_record->name )){

        my $record = Net::Amazon::Route53::ResourceRecordSet::Change->new(
            name            => $old_record->name,
            ttl             => $old_record->ttl,
            type            => "A",
            values          => [$gip],
            original_values => $old_record->values,
            hostedzone      => $hostedzone,
            route53         => $route53,
        );
        $record->change();

    }
}

__END__

=encoding utf-8

=head1 NAME

route53ddns

=head1 DESCRIPTION

A perl script for updating Amazon route53 DNS records

=head1 SYNOPSIS

route53ddns --id=Access Key ID --key=Secret Access Key --zone=example.com --host=hoge.example.com --host=fuga.example.com
